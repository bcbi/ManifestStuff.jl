var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ManifestUtilities","category":"page"},{"location":"#ManifestUtilities","page":"Home","title":"ManifestUtilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ManifestUtilities.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ManifestUtilities]\nPublic = true\nPrivate = false","category":"page"},{"location":"#ManifestUtilities.prune_manifest-Tuple{IO}","page":"Home","title":"ManifestUtilities.prune_manifest","text":"prune_manifest(io::IO; kwargs...)\n\nParse the given project and manifest, and generate a new manifest that only includes packages that are direct or indirect (recursive) dependencies of the given project. The new manifest is printed to the given IO. The original project and manifest are not modified.\n\nRequired Keyword Arguments\n\nproject_filename::AbstractString: the filename of the input Project.toml file\nmanifest_filename::AbstractString: the filename of the input Manifest.toml file\n\n\n\n\n\n","category":"method"},{"location":"#ManifestUtilities.prune_manifest-Tuple{}","page":"Home","title":"ManifestUtilities.prune_manifest","text":"prune_manifest(; kwargs...) -> AbstractString\n\nParse the given project and manifest, and generate a new manifest that only includes packages that are direct or indirect (recursive) dependencies of the given project. The new manifest is returned as an AbstractString. The original project and manifest are not modified.\n\nRequired Keyword Arguments\n\nproject_filename::AbstractString: the filename of the input Project.toml file\nmanifest_filename::AbstractString: the filename of the input Manifest.toml file\n\n\n\n\n\n","category":"method"}]
}
