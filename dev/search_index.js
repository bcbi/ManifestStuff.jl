var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ManifestUtilities","category":"page"},{"location":"#ManifestUtilities","page":"Home","title":"ManifestUtilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ManifestUtilities.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ManifestUtilities]\nPublic = true\nPrivate = false","category":"page"},{"location":"#ManifestUtilities.prune_manifest-Tuple{IO}","page":"Home","title":"ManifestUtilities.prune_manifest","text":"prune_manifest(io::IO; project_filename::AbstractString, manifest_filename::AbstractString)\n\nRead the project and manifest files from the respective filenames, remove all packages from the manifest that are not indirect (recursive) dependencies of the project file, and print the new manifest file to IO. The original project and manifest files are not modified.\n\n\n\n\n\n","category":"method"},{"location":"#ManifestUtilities.prune_manifest-Tuple{}","page":"Home","title":"ManifestUtilities.prune_manifest","text":"prune_manifest(; project_filename::AbstractString, manifest_filename::AbstractString) -> AbstractString\n\nRead the project and manifest files from the respective filenames, remove all packages from the manifest that are not indirect (recursive) dependencies of the project file, and return the new manifest file as a string. The original project and manifest files are not modified.\n\n\n\n\n\n","category":"method"}]
}
